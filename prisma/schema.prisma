// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  VIP
}

model Account {
  id       String @id @default(cuid())
  userName String @unique
  name     String
  password String
  role     Role   @default(STUDENT)
  short    String @default("")
  grade    Int?

  projects            Project[]            @relation("ProjectAccount")
  ownProjects         Project[]            @relation("ProjectTeacher")
  toturialCompletions TutorialCompletion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userName])
  @@index([role])
}

enum Day {
  MON
  TUE
  WED
}

model Project {
  id            String @id @default(cuid())
  name          String
  description   String
  imageUrl      String
  studentsCount Int
  maxStudents   Int    @default(10)
  price         Float  @default(0)
  time          String @default("7:55-12.55")
  emoji         String @default("ðŸ¤—")
  // custom location or room rendered to string
  location      String @default("ASG")
  day           Day    @default(MON)
  minGrade      Int    @default(5)
  maxGrade      Int    @default(11)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // non students cant sign in
  students  Account[] @relation("ProjectAccount")

  // max 3 teachers
  teachers Account[] @relation("ProjectTeacher")
  room     Room?     @relation(fields: [roomId], references: [id])
  roomId   String?

  @@index([id])
  @@index([name])
}

enum Tutorial {
  ABOUT
  FEATURES
}

model TutorialCompletion {
  id        String   @id @default(cuid())
  tutorial  Tutorial
  account   Account  @relation(fields: [accountId], references: [id])
  accountId String
  createdAt DateTime @default(now())
}

// Rooms including their status (free, taken)
model Room {
  id       String    @id @default(cuid())
  name     String
  // taken variable now represented simply by whether it has a project or not
  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
